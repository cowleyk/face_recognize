{
  "nio/CaptureFrame": {
    "version": "2.0.0",
    "description": "Grab a frame of video from a specified camera and send the frame data as a signal.",
    "properties": {
      "camera": {
        "title": "Camera Index",
        "type": "IntType",
        "description": "Where to find the local camera to read from.",
        "default": 0
      },
      "ipcam": {
        "title": "Use IP Camera?",
        "type": "BoolType",
        "description": "Whether or not to use an IP Camera.",
        "default": false
      },
      "ipcam_address": {
        "title": "IP Camera Address",
        "type": "StringType",
        "description": "Address for where to find the IP camera.",
        "default": ""
      }
    },
    "inputs": {
      "default": {
        "description": "Any signal to trigger a frame being grabbed from the specified camera."
      }
    },
    "outputs": {
      "default": {
        "description": "A signal containing the serialized and stringified video frame."
      }
    },
    "commands": {}
  },
  "nio/FindFace": {
    "version": "2.0.0",
    "description": "Grab a frame of video from a specified camera, find a face encoding within the frame, compare the encoding with encoding of known faces from an input signal, output a signal containing the name of the found face.",
    "properties": {
      "accuracy": {
        "title": "Comparison Accuracy",
        "type": "FloatType",
        "description": "Degree of confidence to shoot for when finding faces.",
        "default": 0.6
      },
      "camera": {
        "title": "Camera Index",
        "type": "IntType",
        "description": "Where to find the local camera to read from.",
        "default": 0
      },
      "frame_size": {
        "title": "Frame Size",
        "type": "FloatType",
        "description": "Scaling factor for frame.",
        "default": 1.0
      },
      "image": {
        "title": "Input Image",
        "type": "BoolType",
        "description": "Whether or not to use an IP Camera.",
        "default": false
      },
      "ipcam": {
        "title": "IP Camera",
        "type": "BoolType",
        "description": "Whether or not to use an IP Camera.",
        "default": false
      },
      "ipcam_address": {
        "title": "IP Camera Address",
        "type": "StringType",
        "description": "Address for where to find the IP camera.",
        "default": ""
      },
      "location": {
        "title": "Output Face Location",
        "type": "BoolType",
        "description": "Include coordinate location of face on output signal.",
        "default": false
      }
    },
    "inputs": {
      "known": {
        "description": "Signal to add the known face encodings and names to compare found faces against. Expects a 'faces' object which contains a list of objects with attributes 'name', 'user_id', 'id', and 'encoding'."
      },
      "unknown": {
        "description": "Signal to begin collecting frames from the camera and search for faces."
      }
    },
    "outputs": {
      "default": {
        "description": "A signal containing the name of the face identified from the webcam."
      }
    },
    "commands": {}
  },
  "nio/GetEncodingFromFile": {
    "version": "2.0.0",
    "description": "Load face image file and serialize the encoding.",
    "properties": {
      "image_paths": {
        "title": "Image Path",
        "type": "ListType",
        "description": "Full path to the image file that will be added.",
        "default": []
      },
      "sname": {
        "title": "Save Name",
        "type": "StringType",
        "description": "Name of the face being added to the database.",
        "default": ""
      },
      "uid": {
        "title": "User ID",
        "type": "StringType",
        "description": "Id of the face being added to the database.",
        "default": ""
      }
    },
    "inputs": {
      "default": {
        "description": "Any list of signals with the path to the face image."
      }
    },
    "outputs": {
      "default": {
        "description": "A signal containing the facial encoding, user id, and name."
      }
    },
    "commands": {}
  }
}